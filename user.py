# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_user')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_user')
    _user = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_user', [dirname(__file__)])
        except ImportError:
            import _user
            return _user
        try:
            _mod = imp.load_module('_user', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _user = swig_import_helper()
    del swig_import_helper
else:
    import _user
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

MAX_USERNAME = _user.MAX_USERNAME
MAX_PASSWORD = _user.MAX_PASSWORD
ADMIN = _user.ADMIN
USER = _user.USER
class user_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, user_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, user_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["username"] = _user.user_info_username_set
    __swig_getmethods__["username"] = _user.user_info_username_get
    if _newclass:
        username = _swig_property(_user.user_info_username_get, _user.user_info_username_set)
    __swig_setmethods__["password"] = _user.user_info_password_set
    __swig_getmethods__["password"] = _user.user_info_password_get
    if _newclass:
        password = _swig_property(_user.user_info_password_get, _user.user_info_password_set)
    __swig_setmethods__["user_type"] = _user.user_info_user_type_set
    __swig_getmethods__["user_type"] = _user.user_info_user_type_get
    if _newclass:
        user_type = _swig_property(_user.user_info_user_type_get, _user.user_info_user_type_set)

    def __init__(self):
        this = _user.new_user_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _user.delete_user_info
    __del__ = lambda self: None
user_info_swigregister = _user.user_info_swigregister
user_info_swigregister(user_info)

class user(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, user, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, user, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ui"] = _user.user_ui_set
    __swig_getmethods__["ui"] = _user.user_ui_get
    if _newclass:
        ui = _swig_property(_user.user_ui_get, _user.user_ui_set)
    __swig_setmethods__["next"] = _user.user_next_set
    __swig_getmethods__["next"] = _user.user_next_get
    if _newclass:
        next = _swig_property(_user.user_next_get, _user.user_next_set)

    def __init__(self):
        this = _user.new_user()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _user.delete_user
    __del__ = lambda self: None
user_swigregister = _user.user_swigregister
user_swigregister(user)


def init_user():
    return _user.init_user()
init_user = _user.init_user

def load_users():
    return _user.load_users()
load_users = _user.load_users

def login():
    return _user.login()
login = _user.login

def add_user():
    return _user.add_user()
add_user = _user.add_user

def search_user():
    return _user.search_user()
search_user = _user.search_user

def save_users():
    return _user.save_users()
save_users = _user.save_users

def clear_users():
    return _user.clear_users()
clear_users = _user.clear_users

def save_users_to_file():
    return _user.save_users_to_file()
save_users_to_file = _user.save_users_to_file

def get_last_user():
    return _user.get_last_user()
get_last_user = _user.get_last_user

def get_previous_user(p):
    return _user.get_previous_user(p)
get_previous_user = _user.get_previous_user

def find_user(name):
    return _user.find_user(name)
find_user = _user.find_user

def show_user(info):
    return _user.show_user(info)
show_user = _user.show_user

def input_user(info):
    return _user.input_user(info)
input_user = _user.input_user

def update_user(p):
    return _user.update_user(p)
update_user = _user.update_user
# This file is compatible with both classic and new-style classes.

