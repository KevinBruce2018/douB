# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_book')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_book')
    _book = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_book', [dirname(__file__)])
        except ImportError:
            import _book
            return _book
        try:
            _mod = imp.load_module('_book', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _book = swig_import_helper()
    del swig_import_helper
else:
    import _book
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

MAX_BOOK_NAME = _book.MAX_BOOK_NAME
MAX_PUBLISHER = _book.MAX_PUBLISHER
MAX_DATE = _book.MAX_DATE
MAX_AUTHOR = _book.MAX_AUTHOR
MAX_ISBN = _book.MAX_ISBN
class book_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, book_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, book_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["book_name"] = _book.book_info_book_name_set
    __swig_getmethods__["book_name"] = _book.book_info_book_name_get
    if _newclass:
        book_name = _swig_property(_book.book_info_book_name_get, _book.book_info_book_name_set)
    __swig_setmethods__["author"] = _book.book_info_author_set
    __swig_getmethods__["author"] = _book.book_info_author_get
    if _newclass:
        author = _swig_property(_book.book_info_author_get, _book.book_info_author_set)
    __swig_setmethods__["publisher"] = _book.book_info_publisher_set
    __swig_getmethods__["publisher"] = _book.book_info_publisher_get
    if _newclass:
        publisher = _swig_property(_book.book_info_publisher_get, _book.book_info_publisher_set)
    __swig_setmethods__["pub_date"] = _book.book_info_pub_date_set
    __swig_getmethods__["pub_date"] = _book.book_info_pub_date_get
    if _newclass:
        pub_date = _swig_property(_book.book_info_pub_date_get, _book.book_info_pub_date_set)
    __swig_setmethods__["ISBN"] = _book.book_info_ISBN_set
    __swig_getmethods__["ISBN"] = _book.book_info_ISBN_get
    if _newclass:
        ISBN = _swig_property(_book.book_info_ISBN_get, _book.book_info_ISBN_set)
    __swig_setmethods__["pages"] = _book.book_info_pages_set
    __swig_getmethods__["pages"] = _book.book_info_pages_get
    if _newclass:
        pages = _swig_property(_book.book_info_pages_get, _book.book_info_pages_set)

    def __init__(self):
        this = _book.new_book_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _book.delete_book_info
    __del__ = lambda self: None
book_info_swigregister = _book.book_info_swigregister
book_info_swigregister(book_info)

class book(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, book, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, book, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bi"] = _book.book_bi_set
    __swig_getmethods__["bi"] = _book.book_bi_get
    if _newclass:
        bi = _swig_property(_book.book_bi_get, _book.book_bi_set)
    __swig_setmethods__["next"] = _book.book_next_set
    __swig_getmethods__["next"] = _book.book_next_get
    if _newclass:
        next = _swig_property(_book.book_next_get, _book.book_next_set)

    def __init__(self):
        this = _book.new_book()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _book.delete_book
    __del__ = lambda self: None
book_swigregister = _book.book_swigregister
book_swigregister(book)


def init_book():
    return _book.init_book()
init_book = _book.init_book

def load_books():
    return _book.load_books()
load_books = _book.load_books

def add_book():
    return _book.add_book()
add_book = _book.add_book

def view_book():
    return _book.view_book()
view_book = _book.view_book

def save_books():
    return _book.save_books()
save_books = _book.save_books

def clear_books():
    return _book.clear_books()
clear_books = _book.clear_books

def search_book_by_name():
    return _book.search_book_by_name()
search_book_by_name = _book.search_book_by_name

def search_book_by_author():
    return _book.search_book_by_author()
search_book_by_author = _book.search_book_by_author

def search_book_by_publisher():
    return _book.search_book_by_publisher()
search_book_by_publisher = _book.search_book_by_publisher

def search_book_by_pubdate():
    return _book.search_book_by_pubdate()
search_book_by_pubdate = _book.search_book_by_pubdate

def search_book_by_isbn():
    return _book.search_book_by_isbn()
search_book_by_isbn = _book.search_book_by_isbn

def findstr(source, str):
    return _book.findstr(source, str)
findstr = _book.findstr

def save_books_to_file():
    return _book.save_books_to_file()
save_books_to_file = _book.save_books_to_file

def get_last_book():
    return _book.get_last_book()
get_last_book = _book.get_last_book

def get_previous_book(p):
    return _book.get_previous_book(p)
get_previous_book = _book.get_previous_book

def input_book(info):
    return _book.input_book(info)
input_book = _book.input_book

def show_book(info):
    return _book.show_book(info)
show_book = _book.show_book
# This file is compatible with both classic and new-style classes.

